<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CoveredStats" xml:space="preserve">
    <value>{0}- {1} of {2} covered.</value>
  </data>
  <data name="DirectoryNotFound" xml:space="preserve">
    <value>"Directory not found: '{0}'.</value>
  </data>
  <data name="EnvVarNullOrEmpty" xml:space="preserve">
    <value>{0} envrionment variable was null or empty.</value>
  </data>
  <data name="ErrorOccurredWhilePublishingCCFiles" xml:space="preserve">
    <value>Error occurred while publishing code coverage files. Error: {0}.</value>
  </data>
  <data name="FailedToGetFeatureFlag" xml:space="preserve">
    <value>Failed to get FF {0} Value. By default, publishing data to TCM.</value>
  </data>
  <data name="FailedtoUploadCoverageSummary" xml:space="preserve">
    <value>Failed to upload coverage summary. Exception: {0}.</value>
  </data>
  <data name="FailedToUploadFileCoverage" xml:space="preserve">
    <value>Failed to upload file coverage data. Exception: {1}</value>
  </data>
  <data name="FileContainerUploadFailed" xml:space="preserve">
    <value>Unable to copy file to server StatusCode={0}: {1}. Source file path: {2}. Target server path: {3}.</value>
  </data>
  <data name="FileUploadCancelled" xml:space="preserve">
    <value>File upload has been cancelled during upload file: '{0}'.</value>
  </data>
  <data name="FileUploadDetailTrace" xml:space="preserve">
    <value>Detail upload trace for file that fail to upload: {0}.</value>
  </data>
  <data name="FileUploadFailed" xml:space="preserve">
    <value>Fail to upload '{0}' due to '{1}'.</value>
  </data>
  <data name="FileUploadFailedAfterRetry" xml:space="preserve">
    <value>File upload failed even after retry.</value>
  </data>
  <data name="FileUploadFailedRetryLater" xml:space="preserve">
    <value>{0} files failed to upload, retry these files after a minute.</value>
  </data>
  <data name="FileUploadFileOpenFailed" xml:space="preserve">
    <value>File error '{0}' when uploading file '{1}'.</value>
  </data>
  <data name="FileUploadFinish" xml:space="preserve">
    <value>File: '{0}' took {1} milliseconds to finish upload.</value>
  </data>
  <data name="FileUploadProgress" xml:space="preserve">
    <value>Total file: {0} ---- Processed file: {1} ({2}%).</value>
  </data>
  <data name="FileUploadProgressDetail" xml:space="preserve">
    <value>Uploading '{0}' ({1}%).</value>
  </data>
  <data name="FileUploadRetry" xml:space="preserve">
    <value>Start retry {0} failed files upload.</value>
  </data>
  <data name="FileUploadRetryInSecond" xml:space="preserve">
    <value>Retry file upload after {0} seconds.</value>
  </data>
  <data name="FileUploadRetrySucceed" xml:space="preserve">
    <value>File upload succeed after retry.</value>
  </data>
  <data name="FileUploadSucceed" xml:space="preserve">
    <value>File upload succeed.</value>
  </data>
  <data name="PublishedCodeCoverageArtifact" xml:space="preserve">
    <value>Published '{0}' as artifact '{1}'.</value>
  </data>
  <data name="PublishingCodeCoverageSummary" xml:space="preserve">
    <value>Publishing coverage summary data.</value>
  </data>
  <data name="PublishingCodeCoverageReport" xml:space="preserve">
    <value>Publishing code coverage HTML report.</value>
  </data>
  <data name="RenameIndexFileCoberturaFailed" xml:space="preserve">
    <value>Renaming '{0}' to '{1}' failed while publishing code coverage files. Inner Exception: '{2}'.</value>
  </data>
  <data name="TotalUploadFiles" xml:space="preserve">
    <value>Uploading {0} files.</value>
  </data>
  <data name="CouldNotRenameExtension" xml:space="preserve">
    <value>Could not rename index.htm to index.html in report directory. Exception: {0}</value>
  </data>
  <data name="PublishingFileCoverage" xml:space="preserve">
    <value>Publishing file coverage data.</value>
  </data>
</root>
# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: Powershell@2
  displayName: Copyright notice check
  inputs:
    targetType: inline
    script: |
      $arr = Get-ChildItem -Recurse .\src\**\*.cs
      $files = @()
      foreach ($file in $arr) {
          if ($file.Name -ne "Resources.Designer.cs" -and $file.FullName -notmatch "\\obj\\") {
              $content = $(Get-Content $file.FullName -First 2)
              $first = $content | select -First 1
              $second = $content | select -First 1 -Skip 1
              if ($first -ne "// Copyright (c) Microsoft Corporation. All rights reserved." -and $second -ne "// Licensed under the MIT license. See LICENSE file in the project root for full license information.") {
                  $files += $file.FullName
              }
          }
      }
      if ($files.Length -gt 0) {
          write-host "##vso[task.logissue type=error]All code files must contain the following copyright notice."
          write-host "`n// Copyright (c) Microsoft Corporation. All rights reserved.`n// Licensed under the MIT license. See LICENSE file in the project root for full license information.`n`nThe following files are missing copyright notice."
          foreach ($filename in $files) {
              write-host $filename
          }
      }

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 7.0.x'
  inputs:
    version: 7.0.x

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.sln'
    feedsToUse: 'select'
    versioningScheme: 'off'
    arguments: '-c Release'

- task: DotNetCoreCLI@2
  inputs:
    command: 'test'
    projects: '**/*.Tests.csproj'
    arguments: '--collect "Code coverage"'
    testRunTitle: 'L0/L1'
    feedsToUse: 'select'
    versioningScheme: 'off'
- task: DotNetCoreCLI@2
  displayName: 'dotnet publish'
  inputs:
    command: publish
    publishWebProjects: false
    projects: '**/CoveragePublisher.Console.csproj'
    arguments: '-c Release -f net7.0 -r win-x64'


- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/src/CoveragePublisher.Console/bin/Release/net7.0/win-x64/publish/'
    Contents: '**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)/src/CoveragePublisher.Console/bin/Release/net462'
    Contents: |
      CoveragePublisher.Console.exe
      CoveragePublisher.Console.exe.config

    TargetFolder: '$(Build.ArtifactStagingDirectory)'
    flattenFolders: true

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: 'ls $(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  condition: ne(variables['Build.Reason'], 'PullRequest')
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'CoveragePublisher'
    publishLocation: 'Container'
